syntax = "proto3";

package v1;

import "google/api/annotations.proto";
//import "google/api/routing.proto";
import "google/api/client.proto";
//import "google/api/field_behavior.proto";
//import "google/api/resource.proto";
//import "google/protobuf/empty.proto";
//import "google/protobuf/field_mask.proto";
//import "google/protobuf/timestamp.proto";

option go_package = "protoc-gen-echo/example/v1;v1";

// The greeting service definition.
service Greeter {
  //get token URL
  option (google.api.default_host) = "/login";
  //need auth root path, can multi path
  option (google.api.oauth_scopes) =
      "/restricted,"
      "/restricted1";

  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {
    option (google.api.http) = {
      get: "/helloworld/{name}/hi/{nice}"
    };
  }

  // Create a user
  // The /login mapping service option (google.api.default_host) = "/login";
  rpc CreateUser (CreateUserRequest) returns (CreateUserReply) {
    option (google.api.http) = {
      post: "/login"
      body: "*"
    };
  }

  // Update a user
  // The /restricted/usr/{phone} need auth mapping service option (google.api.oauth_scopes) =
  //      "/restricted";
  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserReply) {
    option (google.api.http) = {
      patch: "/restricted/usr/{phone}"
      body: "*"
    };
  }

  // Delete a user
  rpc DeleteUser (UserRequest) returns (UserReply) {
    option (google.api.http) = {
      delete: "/usr/{phone}"
    };
  }

  // Get user list
  rpc ListUsers (UserRequest) returns (UserReplys) {
    option (google.api.http) = {
      get: "/usr/{phone}"
    };
  }
}

// The request message containing the user's name.
message HelloRequest {
  int32 name = 1;
  string nice = 2;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

// Login request must include username and password field.
message CreateUserRequest {
  string username = 1;
  string password = 2;
}

// Login reply must include token field.
message CreateUserReply {
  string token = 1;
}

// The request message containing the user's name.
message UpdateUserRequest {
  string username = 1;
  string phone = 2;
  string email = 3;
}

// The response message containing the greetings
message UpdateUserReply {
  string message = 1;
  string username = 2;
}


// The request message containing the user's name.
message UserRequest {
  string phone = 1;
  string email = 2;
}

// The response message containing the greetings
message UserReply {
  string message = 1;
}

message UserReplys {
  repeated UserReply userList = 1;

  // The maximum number of books to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 books will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListBooks` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListBooks` must match
  // the call that provided the page token.
  string page_token = 3;
}
