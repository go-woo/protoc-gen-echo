// Code generated by protoc-gen-echo. DO NOT EDIT.
// versions:
// - protoc-gen-echo v0.1.1
// - protoc  v3.12.4
// source: example/v1/greeter.proto

package v1

import (
	"net/http"
	"os"

	"github.com/go-woo/protoc-gen-echo/runtime"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

func RegisterGreeterRouter(e *echo.Echo) {
	jwtKey := "dangerous"
	if os.Getenv("JWTKEY") != "" {
		jwtKey = os.Getenv("JWTKEY")
	}
	config := middleware.JWTConfig{
		Claims:     &runtime.JwtCustomClaims{},
		SigningKey: []byte(jwtKey),
	}

	restricted := e.Group("/restricted")
	restricted.Use(middleware.JWTWithConfig(config))

	restricted1 := e.Group("/restricted1")
	restricted1.Use(middleware.JWTWithConfig(config))

	e.GET("/helloworld/:name/hi/:nice", _Greeter_SayHello0_HTTP_Handler)

	e.POST("/login", _Greeter_CreateUser0_HTTP_Handler)

	restricted.PATCH("/restricted/usr/:phone", _Greeter_UpdateUser0_HTTP_Handler)
	e.DELETE("/usr/:phone", _Greeter_DeleteUser0_HTTP_Handler)

	e.GET("/usr/:phone", _Greeter_ListUsers0_HTTP_Handler)

}

func _Greeter_SayHello0_HTTP_Handler(c echo.Context) error {
	var req *HelloRequest = new(HelloRequest)
	uv := c.QueryParams()
	return runtime.BindValues(req, uv)
	reply, err := GreeterSayHelloBusinessHandler(req, c)
	if err != nil {
		return err
	}
	return c.JSON(http.StatusOK, &reply)
}

func _Greeter_CreateUser0_HTTP_Handler(c echo.Context) error {
	var req *CreateUserRequest = new(CreateUserRequest)
	if err := c.Bind(req); err != nil {
		return err
	}
	uv := c.QueryParams()
	return runtime.BindValues(req, uv)
	reply, err := GreeterCreateUserBusinessHandler(req, c)
	if err != nil {
		return err
	}
	return c.JSON(http.StatusOK, &reply)
}

func _Greeter_UpdateUser0_HTTP_Handler(c echo.Context) error {
	var req *UpdateUserRequest = new(UpdateUserRequest)
	if err := c.Bind(req); err != nil {
		return err
	}
	uv := c.QueryParams()
	return runtime.BindValues(req, uv)
	reply, err := GreeterUpdateUserBusinessHandler(req, c)
	if err != nil {
		return err
	}
	return c.JSON(http.StatusOK, &reply)
}

func _Greeter_DeleteUser0_HTTP_Handler(c echo.Context) error {
	var req *UserRequest = new(UserRequest)
	uv := c.QueryParams()
	return runtime.BindValues(req, uv)
	reply, err := GreeterDeleteUserBusinessHandler(req, c)
	if err != nil {
		return err
	}
	return c.JSON(http.StatusOK, &reply)
}

func _Greeter_ListUsers0_HTTP_Handler(c echo.Context) error {
	var req *UserRequest = new(UserRequest)
	uv := c.QueryParams()
	return runtime.BindValues(req, uv)
	reply, err := GreeterListUsersBusinessHandler(req, c)
	if err != nil {
		return err
	}
	return c.JSON(http.StatusOK, &reply)
}
